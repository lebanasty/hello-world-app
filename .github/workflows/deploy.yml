name: EKS Deployment Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "terraform/**" # Triggers only when these files change
      - "helloworld/**" # Triggers when helm charts change
      - "hello-world-app/**" # Trigger when app code changes
      - ".github/workflows/deploy.yml" # Trigger if this file changes
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: hello-world-cluster

jobs:
  detect-changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    outputs:
      terraform_changed: ${{ steps.terraform_check.outputs.changed }}
      helm_changed: ${{ steps.helm_check.outputs.changed }}
      app_changed: ${{ steps.app_check.outputs.changed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check Terraform Directory Changes
        id: terraform_check
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^terraform/'; then
            echo "changed=true" >> $GITHUB_ENV
            echo "::set-output name=changed::true"
          else
            echo "changed=false" >> $GITHUB_ENV
            echo "::set-output name=changed::false"
          fi

      - name: Check Helm Directory Changes
        id: helm_check
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^helloworld/'; then
            echo "changed=true" >> $GITHUB_ENV
            echo "::set-output name=changed::true"
          else
            echo "changed=false" >> $GITHUB_ENV
            echo "::set-output name=changed::false"
          fi

      - name: Check App Directory Changes
        id: app_check
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^hello-world-app/'; then
            echo "changed=true" >> $GITHUB_ENV
            echo "::set-output name=changed::true"
          else
            echo "changed=false" >> $GITHUB_ENV
            echo "::set-output name=changed::false"
          fi

  docker-build:
    name: Build and push Docker image to ECR
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.app_changed == 'true' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/hello-world-app:latest hello-world-app
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/hello-world-app:latest
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  terraform:
    name: Terraform Provisioning
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.terraform_changed == 'true' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Output kubeconfig
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: terraform/kubeconfig

  helm:
    name: Helm Deployment
    runs-on: ubuntu-latest
    needs: [terraform, detect-changes, docker-build]
    if: ${{ needs.detect-changes.outputs.helm_changed == 'true' ||
            (needs.terraform.result == 'success' && needs.detect-changes.outputs.terraform_changed == 'true') || 
            needs.docker-build.result == 'success' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Attempt to Download kubeconfig Artifact
        if: ${{ needs.detect-changes.outputs.terraform_changed == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
        
      - name: Export kubeconfig
        if: ${{ needs.detect-changes.outputs.terraform_changed == 'true' }}
        run: |
          mkdir -p ~/.kube
          cp ./kubeconfig ~/.kube/config
          sed -i '/exec:/a\ \ \ \ interactiveMode: Never' ~/.kube/config

      - name: Fetch kubeconfig from EKS
        if: ${{ needs.detect-changes.outputs.terraform_changed != 'true' }}
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          mkdir -p ~/.kube
          cp ./kubeconfig ~/.kube/config
          sed -i '/exec:/a\ \ \ \ interactiveMode: Never' ~/.kube/config
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Validate kubeconfig file
        run: |
          kubectl config view

      - name: Validate kubeconfig presence
        run: |
          if [ ! -f ~/.kube/config ]; then
            echo "kubeconfig not found!" && exit 1
          fi

      - name: Helm Install
        run: |
          helm upgrade --install hello-world-release ./helloworld --wait
        
